name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Permette di eseguire manualmente

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Restore runtime packs
      run: dotnet restore --runtime win-x64
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Publish
      run: dotnet publish --configuration Release --output ./publish --no-build --self-contained --runtime win-x64
      
    - name: Extract version from code
      id: version
      run: |
        # Estrai la versione da Program.cs
        $content = Get-Content "Program.cs" -Raw
        if ($content -match 'public const string Version = "([^"]*)"') {
          $version = $matches[1]
        } else {
          $version = "1.0.1"  # Fallback
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Extracted version: $version"
        
    - name: Create release package
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $packageName = "EmailPrintService-v$version-portable-win-x64.zip"
        
        # Crea il package ZIP portabile con tutto incluso
        Compress-Archive -Path "./publish/*" -DestinationPath "./$packageName" -Force
        
        echo "Portable package created: $packageName"
        echo "Package contains all necessary DLLs and runtime - no additional installation required"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EmailPrintService-Release
        path: |
          EmailPrintService-v*.zip
        retention-days: 30
        
    - name: Create Release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        files: EmailPrintService-v*.zip
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ## Email Print Service v${{ steps.version.outputs.version }}
          
          ### 🚀 Nuove funzionalità
          - ✅ Interfaccia ridisegnata con layout rettangolare
          - ✅ Protezione istanza singola
          - ✅ Filtro mittente sicuro (multi-email support)
          - ✅ Fix threading per controllo manuale
          - ✅ Log su file singolo con pulizia automatica
          - ✅ Icona personalizzata per app e tray
          
          ### 🔧 Miglioramenti
          - ✅ Risolto blocco UI dopo avvio servizio
          - ✅ Controllo manuale email non si blocca più
          - ✅ Servizio rimane attivo correttamente
          - ✅ Cleanup risorse migliorato
          
          ### 📦 Contenuto
          - **EmailPrintService-v${{ steps.version.outputs.version }}-portable-win-x64.zip**: Package portabile completo con tutto incluso
          
          ### 🖥️ Requisiti
          - Windows 10/11
          - **Nessun requisito aggiuntivo** - tutto incluso nel package
          
          ### 📋 Installazione
          1. Scarica il package ZIP
          2. Estrai in una cartella
          3. Esegui `EmailPrintService.exe`
          4. Configura le impostazioni email
          5. Avvia il servizio
          
          ### 🔗 Link utili
          - [Documentazione](https://github.com/mccoy88f/eps-windows#readme)
          - [Issues](https://github.com/mccoy88f/eps-windows/issues)
          - [Discussions](https://github.com/mccoy88f/eps-windows/discussions)
          
          ### 👨‍💻 Sviluppatore
          **Antonello Migliorelli** - [@mccoy88f](https://github.com/mccoy88f)
          
          ---
          *Build automatico generato il ${{ github.event.head_commit.timestamp }}*
        draft: false
        prerelease: false 